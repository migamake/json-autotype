{-# LANGUAGE CPP               #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE OverloadedStrings #-}
-- | Wrappers for generating prologue and epilogue code in Haskell.
module Data.Aeson.AutoType.CodeGen.Clang(
    writeClangModule
  , runClangModule
  , defaultClangFilename
  ) where

import qualified Data.Text           as Text
import qualified Data.Text.IO        as Text
import           Data.Text hiding (unwords)
import qualified Data.HashMap.Strict as Map
import           Control.Arrow               (first)
import           Control.Exception (assert)
import           Data.Default
import           Data.Monoid                 ((<>))
import           System.FilePath
import           System.IO
import           System.Process                 (system)
import qualified System.Environment             (lookupEnv)
import           System.Exit                    (ExitCode(..))

import           Data.Aeson.AutoType.Format
import           Data.Aeson.AutoType.Type
import           Data.Aeson.AutoType.CodeGen.Generic(src)
import           Data.Aeson.AutoType.CodeGen.ClangFormat
import           Data.Aeson.AutoType.Util

-- | Default output filname is used, when there is no explicit output file path, or it is "-" (stdout).
-- Default module name is consistent with it.
defaultClangFilename :: FilePath
defaultClangFilename = "json_types.c"

cfileHeader :: Text -> Text
cfileHeader moduleName = Text.unlines [
   "/**"
  ," * NEURON IIoT System for Industry 4.0"
  ," * Copyright (C) 2020-2021 EMQ Technologies Co., Ltd All rights reserved."
  ," *"
  ," * This program is free software; you can redistribute it and/or"
  ," * modify it under the terms of the GNU Lesser General Public"
  ," * License as published by the Free Software Foundation; either"
  ," * version 3 of the License, or (at your option) any later version."
  ," *"
  ," * This program is distributed in the hope that it will be useful,"
  ," * but WITHOUT ANY WARRANTY; without even the implied warranty of"
  ," * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"
  ," * Lesser General Public License for more details."
  ," *"
  ," * You should have received a copy of the GNU Lesser General Public License"
  ," * along with this program; if not, write to the Free Software Foundation,"
  ," * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA."
  ," **/"
  ,""
  ,"/*"
  ," * DO NOT EDIT THIS FILE MANUALLY!"
  ," * It was automatically generated by `json-autotype`."
  ," */"
  ,""
  ,"#include <stdlib.h>"
  ,"#include <string.h>"
  ,""
  ,"#include \"utils/json.h\""
  ,""
  ,Text.concat ["#include \"", moduleName, ".h\""]
  ,""]


cfileEpilogue :: Text -> Text
cfileEpilogue toplevelName = Text.unlines []

hfileHeader :: Text -> Text
hfileHeader moduleName = Text.unlines [
    "/**"
  , " * NEURON IIoT System for Industry 4.0"
  , " * Copyright (C) 2020-2021 EMQ Technologies Co., Ltd All rights reserved."
  , " *"
  , " * This program is free software; you can redistribute it and/or"
  , " * modify it under the terms of the GNU Lesser General Public"
  , " * License as published by the Free Software Foundation; either"
  , " * version 3 of the License, or (at your option) any later version."
  , " *"
  , " * This program is distributed in the hope that it will be useful,"
  , " * but WITHOUT ANY WARRANTY; without even the implied warranty of"
  , " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"
  , " * Lesser General Public License for more details."
  , " *"
  , " * You should have received a copy of the GNU Lesser General Public License"
  , " * along with this program; if not, write to the Free Software Foundation,"
  , " * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA."
  , " **/"
  , ""
  , "/*"
  , " * DO NOT EDIT THIS FILE MANUALLY!"
  , " * It was automatically generated by `json-autotype`."
  , " */"
  , ""
  ,Text.concat ["#ifndef _NEU_JSON_API_", toUpper moduleName, "_H_"]
  , ""
  , "#ifdef __cplusplus"
  , "extern \"C\" {"
  , "#endif"
  , ""
  ]

hfileEpilogue :: Text -> Text
hfileEpilogue _toplevelName = Text.unlines [
    "#ifdef __cplusplus"
  , "}"
  , "#endif"
  , ""
  , "#endif"
  ]

-- | Write a Clang module to an output file, or stdout if `-` filename is given.
writeClangModule :: FilePath -> Text -> Map.HashMap Text Type -> IO ()
writeClangModule outputFilename toplevelName types = do
    withFileOrHandle outputFilename WriteMode stdout $ \hOut ->
      assert (extension == ".c") $ do
        Text.hPutStrLn hOut $ cfileHeader $ Text.pack moduleName
        -- We write types as Clang type declarations to output handle
        Text.hPutStrLn hOut $ displaySplitTypes types
        Text.hPutStrLn hOut $ cfileEpilogue toplevelName
    withFileOrHandle headerFilename WriteMode stdout $ \hOut -> do
      Text.hPutStrLn hOut $ hfileHeader $ Text.pack moduleName
      -- We write types as Clang type declarations to output handle
      Text.hPutStrLn hOut $ declSplitTypes types
      Text.hPutStrLn hOut $ hfileEpilogue toplevelName
  where
    headerFilename = addExtension moduleName ".h"
    (moduleName, extension) =
       first normalizeTypeName'     $
       splitExtension               $
       if     outputFilename == "-"
         then defaultClangFilename
         else outputFilename
    normalizeTypeName' = Text.unpack . normalizeTypeName . Text.pack

runClangModule :: FilePath -> [String] -> IO ExitCode
runClangModule _clangModule _arguments= do
    hPutStrLn stderr "Compiling *not* running Clang module for a test."
    return ExitSuccess

